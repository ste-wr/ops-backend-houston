{"version":3,"sources":["models/index.js","models/index.ts"],"names":["exports","__esModule","init","db","sqlite","require","Database","err","console","error","message","log","on","parallelize","run"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,IAAR,GAAeF,OAAO,CAACG,EAAR,GAAa,KAAK,CAAjC;;ACFA,IAAAC,MAAA,GAAAC,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAIF,EAAE,GAAG,IAAIC,MAAM,CAACE,QAAX,CAAoB,WAApB,EAAiC,UAACC,GAAD,EAAI;AAC1C,MAAGA,GAAH,EAAQ;AACJC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACH;;AACDF,EAAAA,OAAO,CAACG,GAAR,CAAY,uBAAZ;AACH,CALQ,CAAT;AAsDIX,OAAA,CAAAG,EAAA,GAAAA,EAAA;AA/CJA,EAAE,CAACS,EAAH,CAAM,OAAN,EAAe,UAACL,GAAD,EAAI;AACfC,EAAAA,OAAO,CAACG,GAAR,CAAY,cAAYJ,GAAxB;AACH,CAFD;;AAIA,IAAML,IAAI,GAAG,YAAA;AACTC,EAAAA,EAAE,CAACU,WAAH,CAAe,YAAA;AACXV,IAAAA,EAAE,CAACW,GAAH,CAAO,iLAAP,EAKA,UAACP,GAAD,EAAI;AACA,UAAIA,GAAJ,EAAS,CACL;AACH,OAFD,MAEK;AACDC,QAAAA,OAAO,CAACG,GAAR,CAAY,oBAAZ;AACH;AACJ,KAXD;AAYAR,IAAAA,EAAE,CAACW,GAAH,CAAO,sMAAP,EAMA,UAACP,GAAD,EAAI;AACA,UAAIA,GAAJ,EAAS,CACL;AACH,OAFD,MAEK;AACDC,QAAAA,OAAO,CAACG,GAAR,CAAY,mCAAZ;AACH;AACJ,KAZD;AAaAR,IAAAA,EAAE,CAACW,GAAH,CAAO,qKAAP,EAKA,UAACP,GAAD,EAAI;AACA,UAAIA,GAAJ,EAAS,CACL;AACH,OAFD,MAEK;AACDC,QAAAA,OAAO,CAACG,GAAR,CAAY,oCAAZ;AACH;AACJ,KAXD;AAYH,GAtCD;AAuCH,CAxCD;;AA4CIX,OAAA,CAAAE,IAAA,GAAAA,IAAA","file":"index.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.init = exports.db = void 0;\nvar sqlite = require(\"sqlite3\");\nvar db = new sqlite.Database('config.db', function (err) {\n    if (err) {\n        console.error(err.message);\n    }\n    console.log('connected to database');\n});\nexports.db = db;\ndb.on('error', function (err) {\n    console.log(\"DB error \" + err);\n});\nvar init = function () {\n    db.parallelize(function () {\n        db.run(\"CREATE TABLE user (\\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\\n            google_id text, \\n            CONSTRAINT google_id_unique UNIQUE (google_id)\\n            )\", function (err) {\n            if (err) {\n                // Table already created\n            }\n            else {\n                console.log('table USER created');\n            }\n        });\n        db.run(\"CREATE TABLE oauth_access_tokens (\\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\\n            user_id INTEGER, \\n            access_token TEXT,\\n            expiry_date INTEGER\\n            )\", function (err) {\n            if (err) {\n                // Table already created\n            }\n            else {\n                console.log('table oauth_access_tokens created');\n            }\n        });\n        db.run(\"CREATE TABLE oauth_refresh_tokens (\\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\\n            user_id INTEGER,\\n            refresh_token TEXT\\n            )\", function (err) {\n            if (err) {\n                // Table already created\n            }\n            else {\n                console.log('table oauth_refresh_tokens created');\n            }\n        });\n    });\n};\nexports.init = init;\n","import * as sqlite from 'sqlite3'\n\nlet db = new sqlite.Database('config.db', (err) => {\n    if(err) {\n        console.error(err.message)\n    }\n    console.log('connected to database')\n})\n\ndb.on('error', (err) => {\n    console.log(`DB error ${err}`)\n})\n\nconst init = () => {\n    db.parallelize(() => {\n        db.run(`CREATE TABLE user (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            google_id text, \n            CONSTRAINT google_id_unique UNIQUE (google_id)\n            )`,\n        (err) => {\n            if (err) {\n                // Table already created\n            }else{\n                console.log('table USER created')\n            }\n        });\n        db.run(`CREATE TABLE oauth_access_tokens (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER, \n            access_token TEXT,\n            expiry_date INTEGER\n            )`,\n        (err) => {\n            if (err) {\n                // Table already created\n            }else{\n                console.log('table oauth_access_tokens created')\n            }\n        });\n        db.run(`CREATE TABLE oauth_refresh_tokens (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER,\n            refresh_token TEXT\n            )`,\n        (err) => {\n            if (err) {\n                // Table already created\n            }else{\n                console.log('table oauth_refresh_tokens created')\n            }\n        });\n    })\n}\n\nexport {\n    db,\n    init\n}"]}