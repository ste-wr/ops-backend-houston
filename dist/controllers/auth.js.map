{"version":3,"sources":["controllers/auth.js","controllers/auth.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","exports","__esModule","generateGoogleAuthURL","authenticateUserToken","passport","require","bcrypt","google","jwt","models_1","client","auth","OAuth2","process","env","GOOGLE_CLIENT_ID","GOOGLE_CLIENT_SECRET","GOOGLE_CALLBACK_URL","oauth2","version","serializeUser","user","id","getOrInsertUser","db","serialize","get","err","row","console","error","run","lastID","google_id","insertUserAccessToken","user_id","token","expiry","epoch_expiry","log","insertUserRefreshToken","ctx","payload","url","_a","access_type","scope","cookies","generateAuthUrl","existingRefreshToken","data","tokens","userData","request","getToken","code","setCredentials","refresh_token","userinfo","hashedAccessToken","hashSync","access_token","expiry_date","hashedRefreshToken","JSON","stringify","sign","JWT_SALT","expiresIn"],"mappings":"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","file":"auth.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nexports.generateGoogleAuthURL = exports.authenticateUserToken = void 0;\nvar passport = require(\"koa-passport\");\nvar bcrypt = require(\"bcrypt\");\nvar google = require('googleapis').google;\nvar jwt = require('jsonwebtoken');\nvar models_1 = require(\"../models\");\nvar client = new google.auth.OAuth2(process.env.GOOGLE_CLIENT_ID, process.env.GOOGLE_CLIENT_SECRET, process.env.GOOGLE_CALLBACK_URL, 'postmessage');\nvar oauth2 = google.oauth2({\n    auth: client,\n    version: 'v2'\n});\npassport.serializeUser(function (user, done) {\n    done(null, user.id);\n});\nvar getOrInsertUser = function (id) {\n    return new Promise(function (resolve, reject) {\n        var user = null;\n        models_1.db.serialize(function () {\n            models_1.db.get(\"SELECT * FROM user where google_id = ?\", id, function (err, row) {\n                if (err) {\n                    // database error\n                    console.error(err);\n                    reject(err);\n                }\n                else {\n                    if (!row) {\n                        models_1.db.run(\"INSERT INTO user(google_id) VALUES(?)\", [id], function (err) {\n                            if (err) {\n                                console.error(err);\n                            }\n                            user = {\n                                id: this.lastID,\n                                google_id: id\n                            };\n                            resolve(user);\n                        });\n                    }\n                    else {\n                        user = {\n                            id: row.id,\n                            google_id: id\n                        };\n                        resolve(user);\n                    }\n                }\n            });\n        });\n    });\n};\nvar insertUserAccessToken = function (user_id, token, expiry) {\n    var epoch_expiry = expiry / 1000;\n    models_1.db.run(\"INSERT INTO oauth_access_tokens(user_id, access_token, expiry_date) VALUES(?,?,?)\", [user_id, token, epoch_expiry], function (err) {\n        if (err) {\n            console.error(err);\n        }\n        console.log(\"Inserted access token with lastID \" + this.lastID);\n    });\n};\nvar insertUserRefreshToken = function (user_id, token) {\n    models_1.db.run(\"INSERT INTO oauth_refresh_tokens(user_id, refresh_token) VALUES(?,?)\", [user_id, token], function (err) {\n        if (err) {\n            console.error(err);\n        }\n        console.log(\"Inserted refresh token with lastID \" + this.lastID);\n    });\n};\nvar generateGoogleAuthURL = function (ctx) { return __awaiter(void 0, void 0, void 0, function () {\n    var payload, url;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                payload = {\n                    access_type: 'offline',\n                    scope: 'https://www.googleapis.com/auth/userinfo.profile'\n                };\n                if (!ctx.cookies.get('__htsn_refresh_token')) {\n                    payload['prompt'] = 'consent';\n                }\n                return [4 /*yield*/, client.generateAuthUrl(payload)];\n            case 1:\n                url = _a.sent();\n                return [2 /*return*/, url];\n        }\n    });\n}); };\nexports.generateGoogleAuthURL = generateGoogleAuthURL;\nvar authenticateUserToken = function (ctx) { return __awaiter(void 0, void 0, void 0, function () {\n    var payload, existingRefreshToken, data, tokens, userData;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                payload = ctx.request.body;\n                existingRefreshToken = ctx.cookies.get('__hstn_refresh_token');\n                data = null;\n                return [4 /*yield*/, client.getToken(payload.code)];\n            case 1:\n                tokens = (_a.sent()).tokens;\n                client.setCredentials(tokens);\n                // if there is no existing refresh token (cookie-based), and if there's no refresh token in the tokens object,\n                // then we assume that this user has an existing refresh token for a different machine.  In this case, request a\n                // new refresh token from google and store it for this client\n                if (!existingRefreshToken && !tokens.refresh_token) {\n                }\n                return [4 /*yield*/, oauth2.userinfo.get()];\n            case 2:\n                userData = _a.sent();\n                if (!userData.data.id) return [3 /*break*/, 4];\n                return [4 /*yield*/, getOrInsertUser(userData.data.id).then(function (user) {\n                        var hashedAccessToken = bcrypt.hashSync(tokens.access_token, 10);\n                        insertUserAccessToken(user.id, hashedAccessToken, tokens.expiry_date);\n                        var hashedRefreshToken = \"\";\n                        if (tokens.refresh_token) {\n                            hashedRefreshToken = bcrypt.hashSync(tokens.refresh_token, 10);\n                            insertUserRefreshToken(user.id, hashedRefreshToken);\n                        }\n                        data = JSON.stringify({\n                            access_token: jwt.sign({ access_token: hashedAccessToken }, process.env.JWT_SALT, { expiresIn: '3600s' }),\n                            refresh_token: hashedRefreshToken\n                        });\n                    })];\n            case 3:\n                _a.sent();\n                return [3 /*break*/, 5];\n            case 4: return [2 /*return*/, null];\n            case 5: return [2 /*return*/, data];\n        }\n    });\n}); };\nexports.authenticateUserToken = authenticateUserToken;\n","import * as passport from 'koa-passport'\nimport * as bcrypt from 'bcrypt'\nconst google = require('googleapis').google\nconst jwt = require('jsonwebtoken')\nimport { db } from '../models'\n\nconst client = new google.auth.OAuth2(process.env.GOOGLE_CLIENT_ID, process.env.GOOGLE_CLIENT_SECRET, process.env.GOOGLE_CALLBACK_URL, 'postmessage')\nconst oauth2 = google.oauth2({\n    auth: client,\n    version: 'v2'\n})\n\ntype hstnUser = {\n    id: number,\n    google_id: string\n}\n\npassport.serializeUser((user, done) => {\n    done(null, user.id)\n})\n\nconst getOrInsertUser = (id: string) => {\n    return new Promise((resolve, reject) => {\n        let user: hstnUser = null\n        db.serialize(() => {\n            db.get(\"SELECT * FROM user where google_id = ?\", id, (err, row) => {\n                if (err) {\n                    // database error\n                    console.error(err)\n                    reject(err)\n                } else {\n                    if (!row) {\n                        db.run(`INSERT INTO user(google_id) VALUES(?)`, [id], function(this: any, err: any) {\n                            if(err) {\n                                console.error(err)\n                            }\n                            user = {\n                                id: this.lastID,\n                                google_id: id,\n                            }\n                            resolve(user)\n                        })\n                    } else {\n                        user = {\n                            id: row.id,\n                            google_id: id,\n                        }\n                        resolve(user)\n                    }\n                }\n            })\n        })\n    })\n}\n\nconst insertUserAccessToken = (user_id, token, expiry) => {\n    const epoch_expiry = expiry / 1000\n    db.run(`INSERT INTO oauth_access_tokens(user_id, access_token, expiry_date) VALUES(?,?,?)`, [user_id, token, epoch_expiry], function(this: any, err: any) {\n        if(err) {\n            console.error(err)\n        }\n        console.log(`Inserted access token with lastID ${this.lastID}`)\n    })\n}\n\nconst insertUserRefreshToken = (user_id, token) => {\n    db.run(`INSERT INTO oauth_refresh_tokens(user_id, refresh_token) VALUES(?,?)`, [user_id, token], function(this: any, err: any) {\n        if(err) {\n            console.error(err)\n        }\n        console.log(`Inserted refresh token with lastID ${this.lastID}`)\n    })\n}\n\nconst generateGoogleAuthURL = async (ctx) => {\n    let payload = {\n        access_type: 'offline',\n        scope: 'https://www.googleapis.com/auth/userinfo.profile',\n    }\n    if(!ctx.cookies.get('__htsn_refresh_token'))\n    {\n        payload['prompt'] = 'consent'\n    }\n    const url = await client.generateAuthUrl(payload)\n    return url\n}\n\nconst authenticateUserToken = async (ctx) => {\n    const payload = ctx.request.body\n    const existingRefreshToken = ctx.cookies.get('__hstn_refresh_token')\n    let data = null\n    const {tokens} = await client.getToken(payload.code)\n    client.setCredentials(tokens)\n\n    // if there is no existing refresh token (cookie-based), and if there's no refresh token in the tokens object,\n    // then we assume that this user has an existing refresh token for a different machine.  In this case, request a\n    // new refresh token from google and store it for this client\n\n    if(!existingRefreshToken && !tokens.refresh_token) {\n\n    }\n\n    // some documentation:\n    // if we assume that this is the first time we receive the authentication, we will have both the \n    // access token and the refresh token.  We then need to do two things:\n    // 1.  encode the access_token into a JWT object - send both the access token and a hashed version of the refresh token to the client as separate httpOnly cookies\n    // 2.  Put both tokens in the database\n    const userData = await oauth2.userinfo.get()\n    if(userData.data.id) {\n        await getOrInsertUser(userData.data.id).then((user: any) => {\n            const hashedAccessToken = bcrypt.hashSync(tokens.access_token, 10)\n            insertUserAccessToken(user.id, hashedAccessToken, tokens.expiry_date)\n            let hashedRefreshToken = \"\"\n            if(tokens.refresh_token) {\n                hashedRefreshToken = bcrypt.hashSync(tokens.refresh_token, 10)\n                insertUserRefreshToken(user.id, hashedRefreshToken)\n            }\n            data = JSON.stringify({\n                access_token: jwt.sign({access_token: hashedAccessToken}, process.env.JWT_SALT, {expiresIn: '3600s'}),\n                refresh_token: hashedRefreshToken\n            })\n        })\n    } else {\n        return null\n    }\n    return data\n}\n\nexport {\n    authenticateUserToken,\n    generateGoogleAuthURL\n}"]}