{"version":3,"sources":["index.js","index.ts"],"names":["exports","__esModule","express","require","session","passport","util_1","dataStore_1","UsersRouter_1","IndexRouter_1","AuthenticationRouter_1","UsersRouter_2","app","Settings","db","initDataStore","dataStoreGetAsync","promisify","get","bind","module","sess","secret","cookie","secure","env","set","use","initialize","listen","port","console","log","process","on","err","error","exit"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;ACDA,IAAAC,OAAA,GAAAC,OAAA,CAAA,SAAA,CAAA;;AACA,IAAAC,OAAA,GAAAD,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAAE,QAAA,GAAAF,OAAA,CAAA,UAAA,CAAA;;AACA,IAAAG,MAAA,GAAAH,OAAA,CAAA,MAAA,CAAA;;AAEA,IAAAI,WAAA,GAAAJ,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAAK,aAAA,GAAAL,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAAM,aAAA,GAAAN,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAAO,sBAAA,GAAAP,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAAQ,aAAA,GAAAR,OAAA,CAAA,sBAAA,CAAA;;AASA,IAAMS,GAAG,GAAGV,OAAO,EAAnB;;AACA,IAAMW,QAAQ,GAAGV,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMW,EAAE,GAAGP,WAAA,CAAA,SAAA,CAAA,CAAUQ,aAAV,EAAX;AACA,IAAMC,iBAAiB,GAAGV,MAAA,CAAAW,SAAA,CAAUH,EAAE,CAACI,GAAb,EAAkBC,IAAlB,CAAuBL,EAAvB,CAA1B;AACAM,MAAM,CAACpB,OAAP,GAAiB;AACbgB,EAAAA,iBAAiB,EAAAA;AADJ,CAAjB;AAGA,IAAIK,IAAI,GAAgB;AACpBC,EAAAA,MAAM,EAAE,cADY;AAEpBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ;AAFY,CAAxB;;AAOA,IAAGX,QAAQ,CAACY,GAAT,KAAiB,YAApB,EAAkC;AAC9Bb,EAAAA,GAAG,CAACc,GAAJ,CAAQ,aAAR,EAAuB,CAAvB,EAD8B,CACJ;;AAC1BL,EAAAA,IAAI,CAACE,MAAL,CAAYC,MAAZ,GAAqB,IAArB;AACH;;AAEDZ,GAAG,CAACe,GAAJ,CAAQvB,OAAO,CAACiB,IAAD,CAAf;AAEAT,GAAG,CAACe,GAAJ,CAAQtB,QAAQ,CAACuB,UAAT,EAAR;AACAhB,GAAG,CAACe,GAAJ,CAAQtB,QAAQ,CAACD,OAAT,EAAR;;AACAD,OAAO,CAAC,oBAAD,CAAP,C,CAEA;;;AACAS,GAAG,CAACe,GAAJ,CAAQ,GAAR,EAAalB,aAAA,CAAA,SAAA,CAAb;AACAG,GAAG,CAACe,GAAJ,CAAQ,OAAR,EAAiBjB,sBAAA,CAAA,SAAA,CAAjB;AACAE,GAAG,CAACe,GAAJ,CAAQ,QAAR,EAAkBhB,aAAA,CAAA,SAAA,CAAlB,E,CAEA;;AACAC,GAAG,CAACe,GAAJ,CAAQ,GAAR,EAAanB,aAAA,CAAA,SAAA,CAAb;AAEAI,GAAG,CAACiB,MAAJ,CAAWhB,QAAQ,CAACiB,IAApB,EAA0B,YAAA;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAqBnB,QAAQ,CAACiB,IAA1C;AACH,CAFD;AAIAG,OAAO,CAACC,EAAR,CAAW,oBAAX,EAAiC,UAAAC,GAAA,EAAG;AAChCJ,EAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACAF,EAAAA,OAAO,CAACI,IAAR,CAAa,CAAb;AACH,CAHD","file":"index.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar express = require(\"express\");\nvar session = require(\"express-session\");\nvar passport = require(\"passport\");\nvar util_1 = require(\"util\");\nvar dataStore_1 = require(\"./controllers/dataStore\");\nvar UsersRouter_1 = require(\"./routes/UsersRouter\");\nvar IndexRouter_1 = require(\"./routes/IndexRouter\");\nvar AuthenticationRouter_1 = require(\"./routes/AuthenticationRouter\");\nvar UsersRouter_2 = require(\"./routes/UsersRouter\");\nvar app = express();\nvar Settings = require('./settings');\nvar db = dataStore_1[\"default\"].initDataStore();\nvar dataStoreGetAsync = util_1.promisify(db.get).bind(db);\nmodule.exports = {\n    dataStoreGetAsync: dataStoreGetAsync\n};\nvar sess = {\n    secret: 'keyboard cat',\n    cookie: {\n        secure: false\n    }\n};\nif (Settings.env === \"production\") {\n    app.set('trust proxy', 1); //trust first proxy\n    sess.cookie.secure = true;\n}\napp.use(session(sess));\napp.use(passport.initialize());\napp.use(passport.session());\nrequire('./controllers/auth');\n// define all routes\napp.use(\"/\", IndexRouter_1[\"default\"]);\napp.use(\"/auth\", AuthenticationRouter_1[\"default\"]);\napp.use(\"/users\", UsersRouter_2[\"default\"]);\n//last route\napp.use(\"*\", UsersRouter_1[\"default\"]);\napp.listen(Settings.port, function () {\n    console.log(\"Listening on port \" + Settings.port);\n});\nprocess.on('unhandledRejection', function (err) {\n    console.error(err);\n    process.exit(1);\n});\n","import * as express from 'express'\nimport * as session from 'express-session'\nimport * as passport from 'passport'\nimport { promisify } from 'util'\n\nimport DataStore from './controllers/dataStore'\nimport DefaultRouter from './routes/UsersRouter'\nimport IndexRouter from './routes/IndexRouter'\nimport AuthenticationRouter from './routes/AuthenticationRouter'\nimport UsersRouter from './routes/UsersRouter'\n\ntype sessionData = {\n    secret: string,\n    cookie: {\n        secure: boolean\n    }\n}\n\nconst app = express()\nconst Settings = require('./settings')\nconst db = DataStore.initDataStore()\nconst dataStoreGetAsync = promisify(db.get).bind(db)\nmodule.exports = {\n    dataStoreGetAsync\n}\nlet sess: sessionData = {\n    secret: 'keyboard cat',\n    cookie: {\n        secure: false\n    }\n}\n\nif(Settings.env === \"production\") {\n    app.set('trust proxy', 1) //trust first proxy\n    sess.cookie.secure = true\n}\n\napp.use(session(sess))\n\napp.use(passport.initialize())\napp.use(passport.session())\nrequire('./controllers/auth')\n\n// define all routes\napp.use(\"/\", IndexRouter)\napp.use(\"/auth\", AuthenticationRouter)\napp.use(\"/users\", UsersRouter)\n\n//last route\napp.use(\"*\", DefaultRouter)\n\napp.listen(Settings.port, () => {\n    console.log(`Listening on port ${Settings.port}`)\n})\n\nprocess.on('unhandledRejection', err => {\n    console.error(err)\n    process.exit(1)\n})"]}